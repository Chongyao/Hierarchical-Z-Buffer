#include "z_buffer_alg.h"
#include "geometry.h"

using namespace std;
using namespace Eigen;
namespace marvel{





int z_buffer_alg::construct_polygen_table(const int* tris, const float* nods, const size_t& num_v, const size_t num_f{

    Map<const MatrixXd> vertices(nods, 3, num_v);
    MaP<const MatrixXi> triangles(tris, 3, num_f);
    for(size_t i = 0; i < num_f; ++i){
      float y_max, y_min;
      get_max_min(vertices(1, triangles(0,i)), vertices(1, triangles(1, i)), vertices(2, triangles(2, i)),
                  y_max, y_min);
      auto plane_ptr = cal_plane_coeff();
      polygen_table[y_max].pushback({plane_ptr, i, y_max - y_min, color_ptr});
    }

}

  int z_buffer_alg::construct_edge_table(const int* tris, const float* nods, const size_t& num_v, const size_t num_f){
    
  }


z_buffer_alg::z_buffer_alg(const int* tris, const float* nods, const size_t& num_v, const size_t& num_f, const size_t& range_y){
  color_ptr = make_shared<vector<float>>({0, 255, 255});
  polygen_table = vector<vector<polygen>>(range_y + 1);
  construct_polygen_table(&nods[0]);
  construct_edge_table();
}



}
